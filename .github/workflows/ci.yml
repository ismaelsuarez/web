name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-and-build:
    name: "Run Lint, Unit Tests & Build"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma clients
        run: pnpm --filter "*" db:generate

      # Los demás pasos de linting, type-check, format-check y tests unitarios van aquí...
      # (Omitidos por brevedad, son idénticos al informe)

      - name: Run Backend Unit Tests
        run: pnpm --filter backend test

      - name: Run Frontend Unit Tests
        run: pnpm --filter frontend test:run

      - name: Build projects
        run: pnpm turbo build

  e2e-tests:
    name: "Run End-to-End Tests"
    needs: test-and-build # Depende del job anterior
    runs-on: ubuntu-latest
    
    # Centralizamos las variables de entorno para mayor claridad
    env:
      # URL de la base de datos para los comandos ejecutados en el runner (localhost)
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/ecommerce_staging?schema=public"
      # URL del backend para los tests de Playwright
      VITE_API_URL: "http://localhost:3001"
      # Otras variables necesarias para los tests
      JWT_ACCESS_SECRET: "test-secret-access"
      JWT_REFRESH_SECRET: "test-secret-refresh"
      NODE_ENV: "test"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma client
        run: pnpm --filter backend db:generate

      - name: Start services with Docker Compose
        # Usamos --wait para que Docker espere a que los healthchecks pasen
        # Esto es más robusto que un script de espera manual
        run: docker compose -f docker-compose.staging.yml up --build -d --wait

      - name: Debug - Show Docker container status
        # Paso de depuración: Muestra el estado de los contenedores después de arrancar
        run: docker compose -f docker-compose.staging.yml ps

      - name: Debug - Show Docker container logs
        # Paso de depuración: Muestra los logs si algo falla al arrancar
        if: failure()
        run: docker compose -f docker-compose.staging.yml logs

      - name: Wait for backend internal startup (e.g., db push in start.sh)
        # AÑADIDO: Damos un respiro extra para asegurarnos que el "db push" del start.sh finalizó
        run: sleep 10

      - name: Apply Prisma schema (staging)
        # Este comando ahora usará la DATABASE_URL definida en 'env'
        # Sirve como una verificación de que la DB está accesible desde el runner
        run: pnpm --filter backend db:push
        
      - name: Run E2E seed
        # Este comando también usará la DATABASE_URL correcta
        run: pnpm --filter backend db:seed:e2e

      - name: Install Playwright browsers
        run: pnpm --filter frontend exec playwright install --with-deps

      - name: Run E2E tests
        # Playwright recogerá automáticamente VITE_API_URL del entorno
        run: pnpm --filter frontend test:e2e

      - name: Upload Playwright report
        if: always() # Ejecuta este paso incluso si los tests fallan
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/frontend/playwright-report/
          retention-days: 30

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.staging.yml down
          