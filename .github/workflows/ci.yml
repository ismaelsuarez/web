name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Get pnpm store directory
      id: pnpm-store
      shell: bash
      run: |
        echo "path=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-store.outputs.path }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate Prisma client
      run: |
        pnpm --filter backend db:generate
        pnpm --filter frontend exec prisma generate || true

    - name: Lint backend
      run: pnpm --filter backend lint
    - name: Lint frontend
      run: pnpm --filter frontend lint

    - name: Type check backend
      run: pnpm --filter backend type-check
    - name: Type check frontend
      run: pnpm --filter frontend type-check

    - name: Format check
      run: |
        pnpm --filter backend format --check
        pnpm --filter frontend format --check

    - name: Run backend tests with coverage
      run: pnpm --filter backend test:cov
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db?schema=public"
        JWT_ACCESS_SECRET: "test-secret"
        JWT_REFRESH_SECRET: "test-refresh-secret"

    - name: Run frontend tests with coverage
      run: pnpm --filter frontend test:coverage
      env:
        VITE_API_URL: "http://localhost:3001"

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build projects
      run: pnpm turbo build

  e2e-tests:
    runs-on: ubuntu-22.04
    needs: test-and-build
    env:
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/ecommerce_staging?schema=public"
      VITE_API_URL: "http://localhost:3001"
      JWT_ACCESS_SECRET: "test-secret-access"
      JWT_REFRESH_SECRET: "test-secret-refresh"
      NODE_ENV: "test"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Setup Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x

    - name: Get pnpm store directory
      id: pnpm-store
      shell: bash
      run: |
        echo "path=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-store.outputs.path }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate Prisma client
      run: pnpm --filter backend db:generate

    - name: Start databases (Postgres & Redis) only
      run: docker compose -f docker-compose.staging.yml up -d --wait postgres redis

    - name: Debug - Show Docker container status (DBs)
      run: docker compose -f docker-compose.staging.yml ps

    - name: Apply Prisma schema (staging)
      run: pnpm --filter backend db:push

    - name: Run E2E seed
      run: pnpm --filter backend db:seed:e2e

    - name: Verify E2E data (products exist)
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
      run: |
        node -e "const { PrismaClient } = require('@prisma/client'); (async () => { const prisma = new PrismaClient(); const count = await prisma.product.count(); console.log('E2E verify - products count:', count); await prisma.$disconnect(); if (count === 0) { process.exit(2); } })().catch(e => { console.error(e); process.exit(1); });"

    - name: Re-run seed if verification failed
      if: failure()
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
      run: |
        echo "Products were 0, re-running db:push and db:seed:e2e as fallback" 
        pnpm --filter backend db:push
        pnpm --filter backend db:seed:e2e

    - name: Start backend and frontend services
      run: docker compose -f docker-compose.staging.yml up --build -d --wait backend frontend

    - name: Debug - Show Docker container status (all)
      run: docker compose -f docker-compose.staging.yml ps

    - name: Debug - Show Docker container logs on failure
      if: failure()
      run: docker compose -f docker-compose.staging.yml logs

    - name: Install Playwright browsers (with system deps)
      run: pnpm --filter frontend exec playwright install --with-deps

    - name: Run E2E tests
      run: pnpm --filter frontend test:e2e

    - name: Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: apps/frontend/playwright-report/
        retention-days: 30

    - name: Stop services
      if: always()
      run: docker compose -f docker-compose.staging.yml down
          