name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Get pnpm store directory
      id: pnpm-store
      shell: bash
      run: |
        echo "path=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-store.outputs.path }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate Prisma client
      run: |
        pnpm --filter backend db:generate
        pnpm --filter frontend exec prisma generate || true

    - name: Lint backend
      run: pnpm --filter backend lint
    - name: Lint frontend
      run: pnpm --filter frontend lint

    - name: Type check backend
      run: pnpm --filter backend type-check
    - name: Type check frontend
      run: pnpm --filter frontend type-check

    - name: Format check
      run: |
        pnpm --filter backend format --check
        pnpm --filter frontend format --check

    - name: Run backend tests with coverage
      run: pnpm --filter backend test:cov
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db?schema=public"
        JWT_ACCESS_SECRET: "test-secret"
        JWT_REFRESH_SECRET: "test-refresh-secret"

    - name: Run frontend tests with coverage
      run: pnpm --filter frontend test:coverage
      env:
        VITE_API_URL: "http://localhost:3001"

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build projects
      run: pnpm turbo build

  e2e-tests:
    runs-on: ubuntu-22.04
    needs: test-and-build
    env:
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/ecommerce_staging?schema=public"
      VITE_API_URL: "http://localhost:3001"
      JWT_ACCESS_SECRET: "test-secret-access"
      JWT_REFRESH_SECRET: "test-secret-refresh"
      NODE_ENV: "test"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Setup Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x

    - name: Get pnpm store directory
      id: pnpm-store
      shell: bash
      run: |
        echo "path=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-store.outputs.path }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate Prisma client
      run: pnpm --filter backend db:generate

    - name: Start databases (Postgres & Redis) only
      run: docker compose -f docker-compose.staging.yml up -d --wait postgres redis

    - name: Debug - Show Docker container status (DBs)
      run: docker compose -f docker-compose.staging.yml ps

    - name: Apply Prisma schema (staging)
      run: pnpm --filter backend db:push

    - name: Run E2E seed
      run: pnpm --filter backend db:seed:e2e
      continue-on-error: true

    - name: Verify E2E data (products exist)
      id: verify-products
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
      shell: bash
      run: |
        COUNT=$(pnpm --filter backend exec node -e 'const {PrismaClient}=require("@prisma/client");(async()=>{const prisma=new PrismaClient();try{const c=await prisma.product.count();process.stdout.write(String(c));}catch(e){process.stdout.write("0");}finally{await prisma.$disconnect();}})();')
        echo "E2E verify - products count: $COUNT"
        {
          echo "count<<EOF"
          echo "$COUNT"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: Re-run seed if empty (fallback)
      if: steps.verify-products.outputs.count == '0'
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
      run: |
        pnpm --filter backend db:push
        pnpm --filter backend db:seed:e2e

    - name: Re-verify E2E data
      id: verify-after-seed
      if: steps.verify-products.outputs.count == '0'
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
      shell: bash
      run: |
        COUNT=$(pnpm --filter backend exec node -e 'const {PrismaClient}=require("@prisma/client");(async()=>{const prisma=new PrismaClient();try{const c=await prisma.product.count();process.stdout.write(String(c));}catch(e){process.stdout.write("0");}finally{await prisma.$disconnect();}})();')
        echo "E2E re-verify - products count: $COUNT"
        {
          echo "count<<EOF"
          echo "$COUNT"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: Emergency minimal seed (ensure at least 1 product)
      if: steps.verify-after-seed.outputs.count == '0'
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
      run: |
        pnpm --filter backend exec node -e 'const {PrismaClient}=require("@prisma/client");(async()=>{const p=new PrismaClient();try{const cat=await p.category.upsert({where:{slug:"electronics"},update:{},create:{name:"Electronics",slug:"electronics"}});const prod=await p.product.upsert({where:{slug:"notebook-gamer"},update:{},create:{title:"Notebook Gamer Pro",slug:"notebook-gamer",brand:"Test Brand",description:"Seeded product",categoryId:cat.id}});await p.productVariant.upsert({where:{sku:"NB-GAMER-001"},update:{},create:{productId:prod.id,sku:"NB-GAMER-001",price:250000,stock:8,images:[]}});console.log("Emergency seed completed");}catch(e){console.error(e);}finally{await p.$disconnect();}})();'

    - name: Final verify E2E data
      id: verify-final
      if: steps.verify-products.outputs.count == '0'
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
      shell: bash
      run: |
        COUNT=$(pnpm --filter backend exec node -e 'const {PrismaClient}=require("@prisma/client");(async()=>{const prisma=new PrismaClient();try{const c=await prisma.product.count();process.stdout.write(String(c));}catch(e){process.stdout.write("0");}finally{await prisma.$disconnect();}})();')
        echo "E2E final verify - products count: $COUNT"
        {
          echo "count<<EOF"
          echo "$COUNT"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: Debug DB (psql inspect if still empty)
      if: steps.verify-final.outputs.count == '0'
      run: |
        echo "DATABASE_URL=$DATABASE_URL"
        docker compose -f docker-compose.staging.yml exec -T postgres psql -U postgres -d ecommerce_staging -c 'select current_database(), current_schema();'
        docker compose -f docker-compose.staging.yml exec -T postgres psql -U postgres -d ecommerce_staging -c '\dt'
        docker compose -f docker-compose.staging.yml exec -T postgres psql -U postgres -d ecommerce_staging -c 'select count(*) as product_count from products;'
        docker compose -f docker-compose.staging.yml exec -T postgres psql -U postgres -d ecommerce_staging -c 'select count(*) as category_count from categories;'
        docker compose -f docker-compose.staging.yml exec -T postgres psql -U postgres -d ecommerce_staging -c 'select count(*) as variant_count from product_variants;'

    - name: Fail if still empty after emergency seed
      if: steps.verify-final.outputs.count == '0'
      run: |
        echo "‚ùå Products count is still 0 after reseed and emergency seed"
        exit 1

    - name: Start backend and frontend services
      run: docker compose -f docker-compose.staging.yml up --build -d --wait backend frontend

    - name: Debug - Show Docker container status (all)
      run: docker compose -f docker-compose.staging.yml ps

    - name: Debug - Show Docker container logs on failure
      if: failure()
      run: docker compose -f docker-compose.staging.yml logs

    - name: Install Playwright browsers (with system deps)
      run: pnpm --filter frontend exec playwright install --with-deps

    - name: Run E2E tests
      run: pnpm --filter frontend test:e2e

    - name: Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: apps/frontend/playwright-report/
        retention-days: 30

    - name: Stop services
      if: always()
      run: docker compose -f docker-compose.staging.yml down
          