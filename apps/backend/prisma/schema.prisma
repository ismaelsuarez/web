// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  products Product[]

  @@map("categories")
}

model Product {
  id          Int              @id @default(autoincrement())
  title       String
  slug        String           @unique
  description String?
  brand       String
  createdAt   DateTime         @default(now())
  variants    ProductVariant[]
  category    Category         @relation(fields: [categoryId], references: [id])
  categoryId  Int

  @@map("products")
}

model ProductVariant {
  id      Int           @id @default(autoincrement())
  sku     String        @unique
  price   Int
  stock   Int
  images  String[]
  specs   Json
  product Product       @relation(fields: [productId], references: [id])
  productId Int
  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String?
  createdAt    DateTime      @default(now())
  carts        Cart[]
  orders       Order[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User?      @relation(fields: [userId], references: [id])
  userId    Int?
  items     CartItem[]
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id         Int           @id @default(autoincrement())
  cart       Cart          @relation(fields: [cartId], references: [id])
  cartId     Int
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  variantId  Int
  quantity   Int

  @@map("cart_items")
}

model Order {
  id                Int         @id @default(autoincrement())
  user              User?       @relation(fields: [userId], references: [id])
  userId            Int?
  total             Int
  status            String      @default("pending") // pending, paid, failed, cancelled
  mercadopagoId     String?     @unique // ID de MercadoPago
  preferenceId      String?     // ID de preferencia de MP
  paymentUrl        String?     // URL de pago de MP
  shippingAddress   Json?       // Dirección de envío
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  items             OrderItem[]

  @@map("orders")
}

model OrderItem {
  id              Int           @id @default(autoincrement())
  order           Order         @relation(fields: [orderId], references: [id])
  orderId         Int
  variant         ProductVariant @relation(fields: [variantId], references: [id])
  variantId       Int
  priceAtPurchase Int
  quantity        Int

  @@map("order_items")
}
